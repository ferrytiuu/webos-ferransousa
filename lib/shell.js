var async=require("async"),npmlog=require("npmlog"),novacom=require("./base/novacom"),errHndl=require("./base/error-handler");
(function(){var b=npmlog;b.heading="logger";b.level="warn";var h={log:b,remoteRun:function(c,d,g){b.info("shell#remoteRun()");c.session=new novacom.Session(c,function(a){b.verbose("run()","run:",d);b.verbose("run()","options:",c);a?g(a):c.session.run(d,process.stdin,process.stdout,process.stderr,g)})},shell:function(c,d){b.info("shell#shell()");var g=function(a,d){b.info("shell#_ssh()");async.series([function(b){a?setImmediate(b):a=new novacom.Session(c,b)},function(c){var e={term:"screen"};a.ssh.shell(e,
function(d,f){if(d)return setImmediate(c,errHndl.changeErrMsg(d));(function(){function d(a){if(e.rows!==process.stdout.rows||e.columns!==process.stdout.columns)a.setWindow(process.stdout.rows,process.stdout.columns),e.rows=process.stdout.rows,e.columns=process.stdout.columns}f.on("exit",function(d,e){process.stdout.write("\n>>> Terminate the shell, bye.\n\n");b.silly("Stream :: exit :: code: "+d+", signal: "+e);a.ssh.end();c()});f.on("data",function(){d(f)});process.stdout.on("resize",function(){d(f)});
process.stdout.write(">>> Start "+a.getDevice().name+" shell.\n");process.stdout.write(">>> Type `exit` to quit.\n\n");process.stdin.setRawMode(!0);process.stdin.pipe(f);f.pipe(process.stdout)})()})}],function(a,c){var b=!1;0<c.indexOf("id")&&(b=!0);d(a,b)})};async.series([function(a){c.nReplies=1;c.session=new novacom.Session(c,a)},function(a){g(c.session,a)}],function(a){setImmediate(d,a)})}};"undefined"!==typeof module&&module.exports&&(module.exports=h)})();
